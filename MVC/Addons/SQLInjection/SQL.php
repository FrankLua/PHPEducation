<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <?php
    /* 
    SQL-инъекция - это попытка злоумышленника изменить запрос к базе данных для ее компрометации.

    Рекомендуемый способ избежать SQL-инъекций - связывание всех данных с помощью подготовленных запросов.
    Использование подготовленных запросов недостаточно для полного предотвращения SQL-инъекций, но это самый простой и безопасный способ обеспечить ввод данных в SQL-запросы.
    Все динамические литералы данных в выражениях WHERE, SET и VALUES должны быть заменены заполнителями.
    Фактические данные будут связаны во время выполнения и отправлены отдельно от команды SQL.

    Привязка параметров может использоваться только для данных.
    Другие динамические части SQL-запроса должны быть отфильтрованы по известному списку допустимых значений.

    Стратегии защиты
    1) Заходить с минимальными правами к базе данных
    2) Всегда проверяйте введённые данные на соответствие ожидаемому типу.
    3) Если на уровне базы данных не поддерживаются привязанные переменные, то всегда экранируйте любые нечисловые данные
    4) Проверять тип чисел is_numeric() или ctype_digit()
    5) Ни в коем случае не выводите никакой информации о БД, особенно о её структуре
    6) Логгирование БД

    Что может привести к sql инъекции
    любая информация которая поступает от пользователя
    1) формы
    2) куки (если гдето используются в бд)
    3) Даже через файлы ~

    Защита от SQL-инъекций
    Встречаются SQL-инъекции в числовом и строковом параметрах в запросах,
    использующих оператор SELECT, которые являются самыми распространенными.
    Поэтому проверять нужно всё: числа, строки, даты и другие данные в специальных форматах.

    1) Числа
    Функция is_numeric(n) используется для проверки переменной на числовое значение, которая вернёт true,
    если параметр n - число, а в противном случае - false. Также переопределить тип возможно вручную.

    Пример:

    if (isset($_GET['id'])){ $id = $_GET['id'];

    if ( is_numeric($id) == true){ … }

    2) Строки (экранирование)
    Экранирование - это способ дать понять sql читать специальные символы как обычные символы (перед спец символами ставится \)
    addslashes($str) возращает экранируюмую строку
    mysqlш_real_escape_string — Экранирует специальные символы в строках для использования в выражениях SQL

    Компрометации через SQL-конструкции происходят и по причине нахождения в строках небезопасных кавычек и других специальных символов.
    Для предотвращения такой угрозы необходимо использовать функцию addslashes($str),
    которая возвращает строку $str с добавленным обратным слешем (\) перед каждым специальным символом.
    Данный процесс называется экранированием. Для этого в PHP используют функцию mysqli_real_escape_string($str).
    */

    ?>
    <form action="" method="GET">
        <input type="text" name="notProtected">
        <label for="">Not protected</label>
        <input type="text" name="protected">
        <label for="protected">Protected</label>
        <button type='submit'> send </button>
    </form>
    <?php
    define('DB_USER', 'root');
    define('DB_PASS', 'qwertyu');
    define('CONNECTION_STRING', "mysql:host=localhost:4010;dbname=sqlinjection");
    $db = new PDO(CONNECTION_STRING, DB_USER, DB_PASS);
    if (!empty ($_GET['protected'])) {
        $nameP = $_GET['protected'];
        $stmt = $db->prepare("select * from example where name = :name");
        $stmt->bindValue(':name', $nameP, PDO::PARAM_STR);
        $stmt->execute();
        $result = $stmt->fetch(PDO::FETCH_ASSOC);
        var_dump($result);
    }
    if (!empty ($_GET['notProtected'])) {
        $name = $_GET['notProtected'];
        $sqlNP = "select * from example where name = '$name'";
        $result = $db->query($sqlNP); //g'; drop table example -- 
        while ($row = $result->fetch()) {
            $username = $row["name"];
        }
        var_dump($username);

    }


    ?>

</body>

</html>