<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <?php
    /* 
    Для создания базы данных используется команда CREATE DATABASE. Она имеет следующий синтаксис:

    1
    CREATE DATABASE [IF NOT EXISTS] имя_базы_даных;
    В конце команды указывается имя базы данных.

    Первая форма CREATE DATABASE имя_базы_даных пытается создать базу данных, но если такая база данных уже существует, то операция возвратит ошибку.

    Вторая форма CREATE DATABASE IF NOT EXISTS имя_базы_даных пытается создать базу данных, если на сервере отсутствует бд с таким именем.

    Например, в MySQL Workbench CE (или в MySQL Command Line Client) выполним следующую команду: CREATE DATABASE productsdb;

    

    Установка базы данных
    После создания БД с ней производятся различные операции: создание таблиц, добавление и получение данных и т.д.
    Но чтобы установить производить эти операции, надо установить определенную базу данных в качестве используемой.
    Для этого применяется оператор USE: USE productsdb;


    Создание пользователей
    После того, как вы установили и настроили MySQL, вам необходимо создать базы данных,
    таблицы и пользователей.
    Конечно, вы можете сделать это от имени  суперпользователя root, но это не безопасно.

    CREATE USER  'client'@'localhost' IDENTIFIED BY 'qwertyu';

    Найти всех юзеров
    SELECT user FROM mysql.user;


    Кроме имени пользователя, здесь нужно задать хост, с которого может 
    авторизоваться этот пользователь. Здесь может быть доменное имя, IP-адрес, адрес подсети или знак "%", который означает все возможные хосты.

    Права пользователя MySQL

    GRANT привилегии ON база_данных . таблица TO 'имя_пользователя'@'хост';

    Если нужно дать права для всех баз данных или таблиц, используйте вместо названия звездочку - "*"
    Вот основные права пользователя MySQL, которые вы можете использовать:

    ALL PRIVILEGES - все, кроме GRANT;
    USAGE PRIVILEGES - никаких привилегий;
    SELECT - делать выборки из таблиц;
    INSERT - вставлять данные в таблицу;
    UPDATE - обновлять данные в таблице;
    DELETE - удалять данные из таблицы;
    FILE - разрешает читать файлы на сервере;
    CREATE - создавать таблицы или базы данных;
    ALTER - изменять структуру таблиц;
    INDEX - создавать индексы для таблиц;
    DROP - удалять таблицы;
    EVENT - обработка событий;
    TRIGGER - создание триггеров.
    Также доступны такие привилегии администрирования баз данных:

    GRANT - изменять права пользователей;
    SUPER - суперпользователь;
    PROCESS - получение информации о состоянии MySQL;
    RELOAD - позволяет перезагружать таблицы привилегий;
    SHUTDOWN - позволяет отключать или перезапускать базу данных;
    SHOW DATABASES - просмотр списка баз данных;
    LOCK TABLES - блокирование таблиц при использовании SELECT;
    REFERENCES - создание внешних ключей для связывания таблиц;
    CREATE USER - создание пользователей;

    GRANT ALL PRIVILEGES ON test_database . * TO 'client'@'localhost';

    Удаление прав пользователя MySQL

    Чтобы отозвать права у пользователя MySQL, используйте команду REVOKE вместо GRANT. Её синтаксис похож на GRANT:

    REVOKE привилегии ON база_данных . таблица FROM 'имя_пользователя'@'хост';

    REVOKE ALL PRIVILEGES ON test_database . * FROM 'client'@'localhost';


    Создание таблиц
    
    CREATE TABLE table_name 
(
    column_name_1 column_type_1,
    column_name_2 column_type_2,
    ...,
    column_name_N column_type_N,
);
Числовые типы
INT — целочисленные значения от −2147483648 до 2147483647, 4 байта.

DECIMAL — хранит числа с заданной точностью. Использует два параметра — максимальное количество цифр всего числа (precision) 
и количество цифр дробной части (scale). Рекомендуемый тип данных для работы с валютами и координатами.
Можно использовать синонимы NUMERIC, DEC, FIXED.

TINYINT — целые числа от −127 до 128, занимает 1 байт хранимой памяти.

BOOL — 0 или 1. Однозначный ответ на однозначный вопрос — false или true. 
Название столбцов типа boolean часто начинается с is, has, can, allow. 
По факту это даже не отдельный тип данных, а псевдоним для типа TINYINT (1).
Тип настолько востребован на практике, что для него в MySQL создали встроенные константы FALSE (0) или TRUE (1).
Можно использовать синоним BOOLEAN.

FLOAT — дробные числа с плавающей запятой (точкой).

Символьные
VARCHAR(N) — N определяет максимально возможную длину строки.
Создан для хранения текстовых данных переменной длины, поэтому память хранения зависит от длины строки.
Наиболее часто используемый тип строковых данных.

CHAR(N) — как и с varchar, N указывает максимальную длину строки.
Char создан хранить данные строго фиксированной длины, и каждая запись будет занимать ровно столько памяти,
сколько требуется для хранения строки длиной N.

TEXT — подходит для хранения большого объема текста до 65 KB, например, целой статьи.

Дата и время
DATE — только дата. Диапазон от 1000-01-01 по 9999-12-31.
Подходит для хранения дат рождения, исторических дат, начиная с 11 века. Память хранения — 3 байта.

TIME — только время — часы, минуты, секунды — «hh:mm:ss».
Память хранения — 3 байта.

DATETIME — соединяет оба предыдущих типа — дату и время.
Использует 8 байтов памяти.

TIMESTAMP — хранит дату и время начиная с 1970 года. Подходит для большинства бизнес-задач.
Потребляет 4 байта памяти, что в два раза меньше, чем DATETIME,
поскольку использует более скромный диапазон дат.

Бинарные
Используются для хранения файлов, фото, документов, аудио и видеоконтента.
Все это хранится в бинарном виде.

BLOB — до 65 КБ бинарных данных

LARGEBLOB (LONGBLOB) — до 4 ГБ.

 CREATE TABLE table1 (id INT, file longBLOB, user_name VARCHAR(45));


 Атрибуты 
 PRIMARY KEY 
Первичный ключ — особенное поле в SQL-таблице, которое позволяет однозначно идентифицировать каждую запись в ней.
Как правило, эти поля используются для хранения уникальных идентификаторов объектов, которые перечислены в таблице,
например, это может быть ID клиента или товара.
Первичный ключ имеет несколько свойств:

каждая запись в таком поле должна быть уникальной;
запись в поле не должна быть пустой;
в одной таблице может быть только один ключ 
(существуют также составные ключи, которые могут включать в себя несколько полей,
однако в этой статье мы не будем их рассматривать).

NOT NULL
При заполнении таблицы мы утверждаем, что значение этого столбца должно быть установлено

DEFAULT
Можно указать значение по умолчанию, т.е. текст или число, которые будут сохранены, если не указано другое значение.

AUTO_INCREMENT
Каждый раз, когда в таблицу будет добавлена запись, значение этого столбца автоматически увеличится.

UNIQUE
Это ограничение устанавливает, что все значения данного столбца будут уникальны в пределах таблицы, и создает индекс. 

FOREIGN KEY или внешний ключ
Внешний ключ — это ссылка на столбец или группу столбцов другой таблицы.
FOREIGN KEY (position_id) REFERENCES Positions (id)
ON DELETE CASCADE

CASCADE: автоматическое удаление/изменение строк зависимой таблицы при удалении/изменении связанных строк главной таблицы.

SET NULL: при удалении/изменении связанных строк главной таблицы будет установлено значение NULL в строках зависимой таблицы.
Столбец зависимой таблицы должен поддерживать установку NULL, т.е. параметр NOT NULL в этом случае устанавливать нельзя.

RESTRICT: не даёт удалить/изменить строку главной таблицы при наличии связанных строк в зависимой таблице.
Если не указана иная опция, по умолчанию будет использовано NO ACTION, что, по сути, то же самое, что и RESTRICT.
 
  

    */
    ?>
</body>

</html>