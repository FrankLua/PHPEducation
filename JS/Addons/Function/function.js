/* 
Объявление
*/
function showMessage() {
    alert('Всем привет!');
}
showMessage();
showMessage();//Вызыв

/* 
Переменные, объявленные внутри функции, видны только внутри этой функции.
*/

function showMessage() {
    let message = "Привет, я JavaScript!"; // локальная переменная

    alert(message);
}

showMessage(); // Привет, я JavaScript!

alert(message);// Ошибка

/* 
Внешние переменные
У функции есть доступ к внешним переменным, например
*/
let userName = 'Вася';

function showMessage() {
    let message = 'Привет, ' + userName;
    alert(message);
}

showMessage(); // Привет, Вася

/* 
Может менять значение переменной
*/

let userName = 'Вася';

function showMessage() {
    userName = "Петя"; // (1) изменяем значение внешней переменной

    let message = 'Привет, ' + userName;
    alert(message);
}

alert(userName); // Вася перед вызовом функции

showMessage();

alert(userName); // Петя, значение внешней переменной было изменено функцией

/* 
Если функция объявит свою переменную с тем же названием что и родительской области видимости
то новая переменная будет создана для этой функции, родительская же никак не будет затронута.
*/
let userName = 'Вася';

function showMessage() {
    let userName = "Петя"; // объявляем локальную переменную

    let message = 'Привет, ' + userName; // Петя
    alert(message);
}

// функция создаст и будет использовать свою собственную локальную переменную userName
showMessage();

alert(userName); // Вася, не изменилась, функция не трогала внешнюю переменную

/* Параметры */
function showMessage(from, text) { // параметры: from, text
    alert(from + ': ' + text);
}

showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)
/* 
Если в функцию передаётся переменная то это КОПИЯ
функция изменяя её не меняет ничего в глобальной области видимости
*/
function showMessage(from, text) {

    from = '*' + from + '*'; // немного украсим "from"

    alert(from + ': ' + text);
}

let from = "Аня";

showMessage(from, "Привет"); // *Аня*: Привет

// значение "from" осталось прежним, функция изменила значение локальной переменной
alert(from); // Аня
/* 
Параметр – это переменная, указанная в круглых скобках в объявлении функции.
Аргумент – это значение, которое передаётся функции при её вызове.
*/



/* 
Значения по умолчанию

Если при вызове функции аргумент не был указан, то его значением становится undefined.
*/
function showMessage(from, text = "текст не добавлен") {
    alert(from + ": " + text);
}

showMessage("Аня"); // Аня: текст не добавлен

function showMessage(from, text = anotherFunction()) {
    // anotherFunction() выполнится только если не передан text
    // результатом будет значение text
    text = text || 'текст не добавлен';
}
/* 
Современные движки JavaScript поддерживают оператор нулевого слияния ??
*/
function showCount(count) {
    // если count равен undefined или null, показать "неизвестно"
    alert(count ?? "неизвестно"); //Оператор нулевого слияния (??)
}
showCount(0); // 0
showCount(null); // неизвестно
showCount(); // неизвестно

/* 
Возврат значения
*/
function sum(a, b) {
    return a + b;
}

let result = sum(1, 2);
alert(result); // 3

/* 
Результат функции с пустым return или без него – undefined
*/


/* 
Выбор имени функции
"get…" – возвращают значение,
"calc…" – что-то вычисляют,
"create…" – что-то создают,
"check…" – что-то проверяют и возвращают логическое значение, и т.д.


showMessage(..)     // показывает сообщение
getAge(..)          // возвращает возраст (получая его каким-то образом)
calcSum(..)         // вычисляет сумму и возвращает результат
createForm(..)      // создаёт форму (и обычно возвращает её)
checkPermission(..) // проверяет доступ, возвращая true/false

У функции должно быть только одна задача которую она выполняет
*/