'use strict';

const Webpack = require('webpack');
const stdEnv = require('std-env');
const prettyTime = require('pretty-time');
const path = require('node:path');
const chalk = require('chalk');
const consola$1 = require('consola');
const markdownTable = require('markdown-table');
const figures = require('figures');
const ansiEscapes = require('ansi-escapes');
const wrapAnsi = require('wrap-ansi');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const Webpack__default = /*#__PURE__*/_interopDefaultCompat(Webpack);
const prettyTime__default = /*#__PURE__*/_interopDefaultCompat(prettyTime);
const path__default = /*#__PURE__*/_interopDefaultCompat(path);
const chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
const markdownTable__default = /*#__PURE__*/_interopDefaultCompat(markdownTable);
const figures__default = /*#__PURE__*/_interopDefaultCompat(figures);
const ansiEscapes__default = /*#__PURE__*/_interopDefaultCompat(ansiEscapes);
const wrapAnsi__default = /*#__PURE__*/_interopDefaultCompat(wrapAnsi);

function first(arr) {
  return arr[0];
}
function last(arr) {
  return arr.length > 0 ? arr[arr.length - 1] : null;
}
function startCase(str) {
  return str[0].toUpperCase() + str.slice(1);
}
function firstMatch(regex, str) {
  const m = regex.exec(str);
  return m ? m[0] : null;
}
function hasValue(s) {
  return s && s.length > 0;
}
function removeAfter(delimiter, str) {
  return first(str.split(delimiter)) || "";
}
function removeBefore(delimiter, str) {
  return last(str.split(delimiter)) || "";
}
function range(len) {
  const arr = [];
  for (let i = 0; i < len; i++) {
    arr.push(i);
  }
  return arr;
}
function shortenPath(path$1 = "") {
  const cwd = process.cwd() + path.sep;
  return String(path$1).replace(cwd, "");
}
function objectValues(obj) {
  return Object.keys(obj).map((key) => obj[key]);
}

const { bullet, tick, cross, pointerSmall, radioOff } = figures__default;
const nodeModules = `${path.delimiter}node_modules${path.delimiter}`;
const BAR_LENGTH = 25;
const BLOCK_CHAR = "\u2588";
const BLOCK_CHAR2 = "\u2588";
const NEXT = " " + chalk__default.blue(pointerSmall) + " ";
const BULLET = bullet;
const TICK = tick;
const CROSS = cross;
const CIRCLE_OPEN = radioOff;

const consola = consola$1.consola.withTag("webpackbar");
const colorize = (color) => {
  if (color[0] === "#") {
    return chalk__default.hex(color);
  }
  return chalk__default[color] || chalk__default.reset;
};
const renderBar = (progress, color) => {
  const w = progress * (BAR_LENGTH / 100);
  const bg = chalk__default.white(BLOCK_CHAR);
  const fg = colorize(color)(BLOCK_CHAR2);
  return range(BAR_LENGTH).map((i) => i < w ? fg : bg).join("");
};
function createTable(data) {
  return markdownTable__default(data);
}
function ellipsisLeft(str, n) {
  if (str.length <= n - 3) {
    return str;
  }
  return `...${str.slice(str.length - n - 1)}`;
}

const parseRequest = (requestStr) => {
  const parts = (requestStr || "").split("!");
  const file = path__default.relative(
    process.cwd(),
    removeAfter("?", removeBefore(nodeModules, parts.pop()))
  );
  const loaders = parts.map((part) => firstMatch(/[\d@a-z-]+-loader/, part)).filter((v) => hasValue(v));
  return {
    file: hasValue(file) ? file : null,
    loaders
  };
};
const formatRequest = (request) => {
  const loaders = request.loaders.join(NEXT);
  if (loaders.length === 0) {
    return request.file || "";
  }
  return `${loaders}${NEXT}${request.file}`;
};
function hook(compiler, hookName, fn) {
  if (compiler.hooks) {
    compiler.hooks[hookName].tap("WebpackBar:" + hookName, fn);
  } else {
    compiler.plugin(hookName, fn);
  }
}

var __defProp$3 = Object.defineProperty;
var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3