(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.VueTemplateCompiler = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var splitRE$1 = /\r?\n/g;
	var emptyRE = /^\s*$/;
	var needFixRE = /^(\r?\n)*[\t\s]/;

	var deIndent = function deindent (str) {
	  if (!needFixRE.test(str)) {
	    return str
	  }
	  var lines = str.split(splitRE$1);
	  var min = Infinity;
	  var type, cur, c;
	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];
	    if (!emptyRE.test(line)) {
	      if (!type) {
	        c = line.charAt(0);
	        if (c === ' ' || c === '\t') {
	          type = c;
	          cur = count(line, type);
	          if (cur < min) {
	            min = cur;
	          }
	        } else {
	          return str
	        }
	      } else {
	        cur = count(line, type);
	        if (cur < min) {
	          min = cur;
	        }
	      }
	    }
	  }
	  return lines.map(function (line) {
	    return line.slice(min)
	  }).join('\n')
	};

	function count (line, type) {
	  var i = 0;
	  while (line.charAt(i) === type) {
	    i++;
	  }
	  return i
	}

	var emptyObject = Object.freeze({});
	var isArray = Array.isArray;
	// These helpers produce better VM code in JS engines due to their
	// explicitness and function inlining.
	function isUndef(v) {
	    return v === undefined || v === null;
	}
	function isDef(v) {
	    return v !== undefined && v !== null;
	}
	function isTrue(v) {
	    return v === true;
	}
	function isFalse(v) {
	    return v === false;
	}
	/**
	 * Check if value is primitive.
	 */
	function isPrimitive(value) {
	    return (typeof value === 'string' ||
	        typeof value === 'number' ||
	        // $flow-disable-line
	        typeof value === 'symbol' ||
	        typeof value === 'boolean');
	}
	function isFunction(value) {
	    return typeof value === 'function';
	}
	/**
	 * Quick object check - this is primarily used to tell
	 * objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 */
	function isObject(obj) {
	    return obj !== null && typeof obj === 'object';
	}
	/**
	 * Get the raw type string of a value, e.g., [object Object].
	 */
	var _toString = Object.prototype.toString;
	function toRawType(value) {
	    return _toString.call(value).slice(8, -1);
	}
	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 */
	function isPlainObject(obj) {
	    return _toString.call(obj) === '[object Object]';
	}
	/**
	 * Check if val is a valid array index.
	 */
	function isValidArrayIndex(val) {
	    var n = parseFloat(String(val));
	    return n >= 0 && Math.floor(n) === n && isFinite(val);
	}
	function isPromise(val) {
	    return (isDef(val) &&
	        typeof val.then === 'function' &&
	        typeof val.catch === 'function');
	}
	/**
	 * Convert a value to a string that is actually rendered.
	 */
	function toString(val) {
	    return val == null
	        ? ''
	        : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
	            ? JSON.stringify(val, replacer, 2)
	            : String(val);
	}
	function replacer(_key, val) {
	    // avoid circular deps from v3
	    if (val && val.__v_isRef) {
	        return val.value;
	    }
	    return val;
	}
	/**
	 * Convert an input value to a number for persistence.
	 * If the conversion fails, return original string.
	 */
	function toNumber(val) {
	    var n = parseFloat(val);
	    return isNaN(n) ? val : n;
	}
	/**
	 * Make a map and return a function for checking if a key
	 * is in that map.
	 */
	function makeMap(str, expectsLowerCase) {
	    var map = Object.create(null);
	    var list = str.split(',');
	    for (var i = 0; i < list.length; i++) {
	        map[list[i]] = true;
	    }
	    return expectsLowerCase ? function (val) { return map[val.toLowerCase()]; } : function (val) { return map[val]; };
	}
	/**
	 * Check if a tag is a built-in tag.
	 */
	var isBuiltInTag = makeMap('slot,component', true);
	/**
	 * Check if an attribute is a reserved attribute.
	 */
	var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
	/**
	 * Check whether an object has the property.
	 */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	function hasOwn(obj, key) {
	    return hasOwnProperty.call(obj, key);
	}
	/**
	 * Create a cached version of a pure function.
	 */
	function cached(fn) {
	    var cache = Object.create(null);
	    return function cachedFn(str) {
	        var hit = cache[str];
	        return hit || (cache[str] = fn(str));
	    };
	}
	/**
	 * Camelize a hyphen-delimited string.
	 */
	var camelizeRE = /-(\w)/g;
	var camelize = cached(function (str) {
	    return str.replace(camelizeRE, function (_, c) { return (c ? c.toUpperCase() : ''); });
	});
	/**
	 * Capitalize a string.
	 */
	var capitalize = cached(function (str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	});
	/**
	 * Hyphenate a camelCase string.
	 */
	var hyphenateRE = /\B([A-Z])/g;
	var hyphenate = cached(function (str) {
	    return str.replace(hyphenateRE, '-$1').toLowerCase();
	});
	/**
	 * Mix properties into target object.
	 */
	function extend(to, _from) {
	    for (var key in _from) {
	        to[key] = _from[key];
	    }
	    return to;
	}
	/**
	 * Merge an Array of Objects into a single Object.
	 */
	function toObject(arr) {
	    var res = {};
	    for (var i = 0; i < arr.length; i++) {
	        if (arr[i]) {
	            extend(res, arr[i]);
	        }
	    }
	    return res;
	}
	/* eslint-disable no-unused-vars */
	/**
	 * Perform no operation.
	 * Stubbing args to make Flow happy without leaving useless transpiled code
	 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
	 */
	function noop(a, b, c) { }
	/**
	 * Always return false.
	 */
	var no = function (a, b, c) { return false; };
	/* eslint-enable no-unused-vars */
	/**
	 * Return the same value.
	 */
	var identity = function (_) { return _; };
	/**
	 * Generate a string containing static keys from compiler modules.
	 */
	function genStaticKeys$1(modules) {
	    return modules
	        .reduce(function (keys, m) { return keys.concat(m.staticKeys || []); }, [])
	        .join(',');
	}
	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 */
	function looseEqual(a, b) {
	    if (a === b)
	        return true;
	    var isObjectA = isObject(a);
	    var isObjectB = isObject(b);
	    if (isObjectA && isObjectB) {
	        try {
	            var isArrayA = Array.isArray(a);
	            var isArrayB = Array.isArray(b);
	            if (isArrayA && isArrayB) {
	                return (a.length === b.length &&
	                    a.every(function (e, i) {
	                        return looseEqual(e, b[i]);
	                    }));
	            }
	            else if (a instanceof Date && b instanceof Date) {
	                return a.getTime() === b.getTime();
	            }
	            else if (!isArrayA && !isArrayB) {
	                var keysA = Object.keys(a);
	                var keysB = Object.keys(b);
	                return (keysA.length === keysB.length &&
	                    keysA.every(function (key) {
	                        return looseEqual(a[key], b[key]);
	                    }));
	            }
	            else {
	                /* istanbul ignore next */
	                return false;
	            }
	        }
	        catch (e) {
	            /* istanbul ignore next */
	            return false;
	        }
	    }
	    else if (!isObjectA && !isObjectB) {
	        return String(a) === String(b);
	    }
	    else {
	        return false;
	    }
	}
	/**
	 * Return the first index at which a loosely equal value can be
	 * found in the array (if value is a plain object, the array must
	 * contain an object of the same shape), or -1 if it is not present.
	 */
	function looseIndexOf(arr, val) {
	    for (var i = 0; i < arr.length; i++) {
	        if (looseEqual(arr[i], val))
	            return i;
	    }
	    return -1;
	}
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#polyfill
	function hasChanged(x, y) {
	    if (x === y) {
	        return x === 0 && 1 / x !== 1 / y;
	    }
	    else {
	        return x === x || y === y;
	    }
	}

	var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
	    'link,meta,param,source,track,wbr');
	// Elements that you can, intentionally, leave open
	// (and which close themselves)
	var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');
	// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
	// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
	var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
	    'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
	    'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
	    'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
	    'title,tr,track');

	/**
	 * unicode letters used for parsing html tags, component names and property paths.
	 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
	 * skipping \u10000-\uEFFFF due to it freezing up Phan